#!/usr/bin/python
# -*- coding: utf-8 -*-

import os,os.path
import sys
import sqlite3
import xmlrpclib

USERNAME="kompiro"
PASSWORD="trac"
REPOSITORY_URL="localhost:8080/test/login/xmlrpc"
SERVER_URL = "http://" + USERNAME + ":" + PASSWORD +"@" + REPOSITORY_URL
home = os.environ['HOME'];
local_trac_dir = home+'/.trac';

def main():
  init_ticket_db();
  parse_opt();

def parse_opt():
  if len(sys.argv) == 1:
    usage();
    return;
  opt = sys.argv[1]
  if opt == "clone":
      url = sys.argv[2]
      create_ticket_repository(url);
  if opt == "list":
    ticket_list();
  if opt == "add":
    summary = sys.argv[2]
    ticket_add(summary);
  if opt == "push":
    ticket_push();
  if opt == "help":
      usage();

def usage():
  usage_message = """
gitrac [command] 

  command:
    %s""" % ticket_list.__doc__;
  print usage_message;

def create_ticket_repository(url):
    import ConfigParser
    config = ConfigParser.RawConfigParser()
    config.read('.trac/settings.conf');


def init_ticket_db():
  if os.path.exists(local_trac_dir) == False:
    os.mkdir(local_trac_dir);
  global db;
  db = sqlite3.connect(local_trac_dir + '/ticket.db',isolation_level=None);
  if not_exists_local_ticket():
    create_local_ticket()
  return db;

def not_exists_local_ticket():
  sql = """
    SELECT count(*) FROM sqlite_master WHERE
    type='table' AND name='local_ticket';
  """;
  for count in db.execute(sql):
    return count[0] == 0;

def create_local_ticket():
  sql = u"""create table local_ticket (
    id integer primary key autoincrement,
    ticket_id integer,
    summary TEXT,
    close)
  """;
  db.execute(sql);

def ticket_list():
  """   list - show local ticket list """
  for id,ticket_id,summary,close in db.execute('select * from local_ticket'):
    resistered = ticket_id != None
    if resistered:
      show = ticket_id
    else:
      show = "unregistered"
    print id,show,summary,close == 1

def ticket_add(summary):
  """
  create ticket to local ticket
  """
  sql = u"""
  insert into local_ticket values(null,?,?,?)
  """;
  db.execute(sql,(None,summary.decode('utf-8'),False));  

def ticket_push():
  server = xmlrpclib.ServerProxy(SERVER_URL)
  for id,ticket_id,summary,close in db.execute('select * from local_ticket'):
    resistered = ticket_id != None
    if resistered == False:
      registered_id = server.ticket.create(summary,"",{'type':'defect'})
      print "created", registered_id,summary;
      db.execute("update local_ticket set ticket_id=? where id = ?",(registered_id,id))

if __name__=='__main__':
  main();

